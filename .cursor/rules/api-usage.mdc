---
description:
globs:
alwaysApply: true
---
# API Usage Guide

## Initialization

### Global Configuration
```go
// Initialize global logger settings
logger.Init(config Config)

// Config structure
type Config struct {
    MinLevel         LogLevel     // Minimum log level for filtering
    Output           io.Writer    // Output destination
    EnableSourceInfo bool         // Enable source file information
    PrettifyJSON     bool         // Enable pretty-printed JSON output
    MaxLogEntries    int          // Maximum log entries before auto-flush (0 = no limit)
    LogType          string       // Type field value in log output (default: "request")
    ErrorHandler     ErrorHandler // Error handler for logger errors (nil = use global)
}

// Default configuration
config := logger.DefaultConfig()
logger.Init(config)

// Custom configuration
logger.Init(logger.Config{
    MinLevel:      logger.DebugLevel,
    Output:        os.Stdout,
    PrettifyJSON:  true,
    MaxLogEntries: 1000, // Auto-flush after 1000 entries
    LogType:       "batch", // Custom log type
    ErrorHandler:  logger.NewDefaultErrorHandler(), // Custom error handler
})
```

### Context Logger Setup
```go
// Create and attach context logger
ctx := context.Background()
contextLogger := logger.NewContextLogger()
ctx = logger.WithLogger(ctx, contextLogger)

// Retrieve logger from context
contextLogger := logger.FromContext(ctx)
```

## Logging Methods

### Context Logger
```go
// Log with context
logger.Infof(ctx context.Context, format string, args ...interface{})
logger.Debugf(ctx context.Context, format string, args ...interface{})
logger.Warnf(ctx context.Context, format string, args ...interface{})
logger.Errorf(ctx context.Context, format string, args ...interface{})
logger.Criticalf(ctx context.Context, format string, args ...interface{})

// Flush accumulated logs
logger.FlushContext(ctx)
```

### Direct Logger
```go
// Direct logging without context (global instance - RECOMMENDED)
logger.D.Infof(format string, args ...interface{})
logger.D.Debugf(format string, args ...interface{})
logger.D.Warnf(format string, args ...interface{})
logger.D.Errorf(format string, args ...interface{})
logger.D.Criticalf(format string, args ...interface{})

// Create custom direct logger (for advanced scenarios)
directLogger := logger.NewDirectLogger()
directLogger.SetLevel(logger.WarnLevel)
directLogger.SetLevelFromString("ERROR")
directLogger.SetOutput(logFile)

// Use NewDirectLogger() when you need:
// - Different log levels for different loggers
// - Different output destinations
// - Different formatters
// - Multiple logger instances with different configurations
```

## Error Handling

### Error Handler Interface
```go
type ErrorHandler interface {
    HandleError(operation string, err error)
}

// Function type implementation
type ErrorHandlerFunc func(operation string, err error)
func (f ErrorHandlerFunc) HandleError(operation string, err error) {
    f(operation, err)
}
```

### Built-in Error Handlers
```go
// Default error handler (writes to stderr)
defaultHandler := logger.NewDefaultErrorHandler()
logger.SetGlobalErrorHandler(defaultHandler)

// Custom output error handler
fileHandler := logger.NewDefaultErrorHandlerWithOutput(logFile)
logger.SetGlobalErrorHandler(fileHandler)

// Silent error handler (ignores all errors)
silentHandler := &logger.SilentErrorHandler{}
logger.SetGlobalErrorHandler(silentHandler)

// Function-based error handler
funcHandler := logger.ErrorHandlerFunc(func(operation string, err error) {
    fmt.Printf("Logger error in %s: %v\n", operation, err)
})
logger.SetGlobalErrorHandler(funcHandler)
```

### Error Handler Configuration
```go
// Set global error handler
logger.SetGlobalErrorHandler(handler)

// Get current global error handler
currentHandler := logger.GetGlobalErrorHandler()

// Configure error handler in Config
logger.Init(logger.Config{
    MinLevel:     logger.InfoLevel,
    ErrorHandler: logger.NewDefaultErrorHandlerWithOutput(errorLogFile),
})
```

## Memory Optimization

### Auto-Flush Configuration
```go
// Configure auto-flush behavior
logger.Init(logger.Config{
    MaxLogEntries: 500, // Auto-flush after 500 entries
})

// Disable auto-flush (unlimited entries until manual flush)
logger.Init(logger.Config{
    MaxLogEntries: 0, // 0 means no limit
})
```

### Memory Pool Management
```go
// Pool statistics (for monitoring)
stats := logger.GetPoolStats()
fmt.Printf("LogEntry Pool Size: %d\n", stats.LogEntryPoolSize)
fmt.Printf("Slice Pool Size: %d\n", stats.SlicePoolSize)

// Note: Pool management is automatic and internal
// LogEntry and []*LogEntry slices are automatically pooled for memory efficiency
```

### Auto-Flush Behavior
- **Context Logger**: Automatically flushes when the number of accumulated log entries reaches `MaxLogEntries`
- **Entry Counting**: Only entries that pass the log level filter are counted toward the limit
- **Batch Processing**: Each auto-flush creates a separate log batch with its own start/end time
- **Context Preservation**: Context fields are preserved across auto-flush operations
- **Memory Management**: Entries are cleared after each flush to free memory
- **Pool Optimization**: LogEntry objects are automatically pooled and reused

### Example: Memory-Efficient Logging
```go
// Configure for memory efficiency
logger.Init(logger.Config{
    MinLevel:      logger.InfoLevel,
    MaxLogEntries: 100, // Small batch size for frequent flushing
    PrettifyJSON:  false, // Compact output
})

ctx := context.Background()
contextLogger := logger.NewContextLogger()
ctx = logger.WithLogger(ctx, contextLogger)

// Add context
logger.AddContextValue(ctx, "request_id", "req-123")

// Log entries - will auto-flush every 100 entries
for i := 0; i < 250; i++ {
    logger.Infof(ctx, "Processing item %d", i)
}
// This will result in 2 auto-flushes (at 100 and 200 entries)
// Plus 50 remaining entries that need manual flush

// Manual flush for remaining entries
logger.FlushContext(ctx)
```

## Context Operations

### Adding Context Fields
```go
// Add single field
logger.AddContextValue(ctx context.Context, key string, value interface{})

// Add multiple fields
logger.AddContextValues(ctx context.Context, fields map[string]interface{})

// Direct logger context operations
contextLogger := logger.FromContext(ctx)
contextLogger.AddContextValue("key", "value")
contextLogger.AddContextValues(map[string]interface{}{
    "request_id": "req-123",
    "user_id":    "user-456",
})
```

## Middleware

### Adding Custom Middleware
```go
type Middleware func(entry *LogEntry, next func(*LogEntry))

// Add middleware to the global pipeline
logger.AddMiddleware(yourMiddleware)

// Clear all middleware
logger.ClearMiddleware()

// Get middleware count
count := logger.GetMiddlewareCount()
```

### Password Masking Middleware
```go
// Create password masking middleware with defaults
passwordMasker := logger.NewPasswordMaskingMiddleware()
logger.AddMiddleware(passwordMasker.Middleware())

// Customize password masking
passwordMasker := logger.NewPasswordMaskingMiddleware().
    WithMaskString("[REDACTED]").
    WithPasswordKeys([]string{"password", "secret", "token"}).
    AddPasswordKey("api_key")

logger.AddMiddleware(passwordMasker.Middleware())
```

## Formatter Configuration

### Setting Custom Formatters
```go
// For DirectLogger
directLogger := logger.NewDirectLogger()
directLogger.SetFormatter(formatter.NewContextFlattenFormatter())

// For ContextLogger
contextLogger := logger.NewContextLogger()
contextLogger.SetFormatter(formatter.NewContextFlattenFormatterWithIndent("  "))
```

### Available Formatters
```go
// JSON Formatters
formatter.NewJSONFormatter()                           // Compact JSON
formatter.NewJSONFormatterWithIndent("  ")            // Pretty-printed JSON

// Context Flatten Formatters
formatter.NewContextFlattenFormatter()                 // Compact context-flattened format
formatter.NewContextFlattenFormatterWithIndent("  ")  // Pretty-printed context-flattened format
```

## HTTP Middleware

### Setting up HTTP Logging
```go
import "github.com/zentooo/logspan/http_middleware"

// Apply logging middleware to HTTP handler
handler := http_middleware.LoggingMiddleware(yourHandler)

// Automatic context setup with request information
// - method, url, path, query, user_agent, remote_addr, host
// - status_code, duration_ms (added after response)
```

## Log Levels

### Available Levels
```go
logger.DebugLevel    // Detailed debugging information
logger.InfoLevel     // General informational messages
logger.WarnLevel     // Warning messages
logger.ErrorLevel    // Error messages
logger.CriticalLevel // Critical error messages

// Parse from string
level := logger.ParseLogLevel("INFO")
levelString := logger.InfoLevel.String() // "INFO"
```

## Configuration Management

### Global Configuration Access
```go
// Check if logger is initialized
if logger.IsInitialized() {
    config := logger.GetConfig()
    // Use config...
}
```

## Advanced Features

### Custom Log Types
```go
// Configure custom log type
logger.Init(logger.Config{
    LogType: "batch_processing", // Custom type instead of default "request"
})

// This affects the "type" field in JSON output
```

### Logger Error Handling
```go
// LoggerError type for structured error information
type LoggerError struct {
    Operation string
    Err       error
}

// Create logger errors
loggerErr := logger.NewLoggerError("flush", originalError)
fmt.Printf("Error: %v\n", loggerErr)
fmt.Printf("Unwrapped: %v\n", loggerErr.Unwrap())
```
