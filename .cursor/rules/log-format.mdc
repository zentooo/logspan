---
description:
globs:
alwaysApply: true
---
# Log Format Guide

## Default JSON Format

The default log output follows this structure:

```json
{
  "type": "request",
  "context": {
    "request_id": "req-12345",
    "user_id": "user-67890"
  },
  "runtime": {
    "severity": "INFO",
    "startTime": "2023-10-27T09:59:58.123456+09:00",
    "endTime": "2023-10-27T10:00:00.223456+09:00",
    "elapsed": 150,
    "lines": [
      {
        "timestamp": "2023-10-27T09:59:59.123456+09:00",
        "level": "INFO",
        "message": "Request processing started"
      },
      {
        "timestamp": "2023-10-27T09:59:59.223456+09:00",
        "level": "DEBUG",
        "message": "Validating input parameters"
      }
    ]
  }
}
```

## Pretty-Printed JSON Format

When `PrettifyJSON` is enabled in the configuration:

```json
{
  "type": "request",
  "context": {
    "request_id": "req-12345",
    "user_id": "user-67890"
  },
  "runtime": {
    "severity": "INFO",
    "startTime": "2023-10-27T09:59:58.123456+09:00",
    "endTime": "2023-10-27T10:00:00.223456+09:00",
    "elapsed": 150,
    "lines": [
      {
        "timestamp": "2023-10-27T09:59:59.123456+09:00",
        "level": "INFO",
        "message": "Request processing started"
      }
    ]
  }
}
```

## Key Fields

### Top Level
- `type`: Log type (configurable via Config.LogType, default: "request")
- `context`: Common context information for the entire request/processing unit
- `runtime`: Runtime information and log entries

### Runtime Section
- `severity`: Highest log level among all entries in this context
- `startTime`: Processing start time (RFC3339Nano format)
- `endTime`: Processing end time (RFC3339Nano format)
- `elapsed`: Processing duration in milliseconds
- `lines`: Array of individual log entries

### Log Entry (in lines array)
- `timestamp`: Entry timestamp (RFC3339Nano format)
- `level`: Log level (DEBUG, INFO, WARN, ERROR, CRITICAL)
- `message`: Log message

### Config Section
- `elapsedUnit`: Unit for elapsed time measurement (always "ms" for milliseconds)

## Context Flatten Format

When using ContextFlatten formatter, the context fields are flattened to the top level:

```json
{
  "request_id": "req-12345",
  "user_id": "user-67890",
  "type": "request",
  "runtime": {
    "severity": "INFO",
    "startTime": "2023-10-27T09:59:58.123456+09:00",
    "endTime": "2023-10-27T10:00:00.223456+09:00",
    "elapsed": 150,
    "lines": [
      {
        "timestamp": "2023-10-27T09:59:59.123456+09:00",
        "level": "INFO",
        "message": "Request processing started"
      },
      {
        "timestamp": "2023-10-27T09:59:59.223456+09:00",
        "level": "DEBUG",
        "message": "Validating input parameters"
      }
    ]
  },
  "config": {
    "elapsedUnit": "ms"
  }
}
```

### Context Flatten Features
- Context fields are moved to the top level for easier access
- Original structure (`type`, `runtime`, `config`) is preserved
- If context keys conflict with top-level keys, context values take precedence
- Supports both compact and pretty-printed formats

## Custom Log Types

The `type` field can be customized via configuration:

```json
{
  "type": "batch_processing",
  "context": {
    "batch_id": "batch-001",
    "total_records": 10000
  },
  "runtime": {
    "severity": "INFO",
    "startTime": "2023-10-27T09:59:58.123456+09:00",
    "endTime": "2023-10-27T10:00:00.223456+09:00",
    "elapsed": 150,
    "lines": [
      {
        "timestamp": "2023-10-27T09:59:59.123456+09:00",
        "level": "INFO",
        "message": "Batch processing started"
      }
    ]
  },
  "config": {
    "elapsedUnit": "ms"
  }
}
```

## Direct Logger Format

Direct logger outputs single entries immediately:

### JSON Format
```json
{
  "type": "request",
  "context": {},
  "runtime": {
    "severity": "INFO",
    "startTime": "2023-10-27T09:59:58.123456+09:00",
    "endTime": "2023-10-27T09:59:58.123456+09:00",
    "elapsed": 0,
    "lines": [
      {
        "timestamp": "2023-10-27T09:59:58.123456+09:00",
        "level": "INFO",
        "message": "Direct log message"
      }
    ]
  },
  "config": {
    "elapsedUnit": "ms"
  }
}
```

### Context Flatten Format
```json
{
  "type": "request",
  "runtime": {
    "severity": "INFO",
    "startTime": "2023-10-27T09:59:58.123456+09:00",
    "endTime": "2023-10-27T09:59:58.123456+09:00",
    "elapsed": 0,
    "lines": [
      {
        "timestamp": "2023-10-27T09:59:58.123456+09:00",
        "level": "INFO",
        "message": "Direct log message"
      }
    ]
  },
  "config": {
    "elapsedUnit": "ms"
  }
}
```

## Auto-Flush Behavior

When auto-flush is enabled, multiple log batches may be output for a single context:

### First Batch (Auto-flushed)
```json
{
  "type": "request",
  "context": {
    "request_id": "req-12345",
    "batch": 1
  },
  "runtime": {
    "severity": "INFO",
    "startTime": "2023-10-27T09:59:58.123456+09:00",
    "endTime": "2023-10-27T09:59:59.123456+09:00",
    "elapsed": 1000,
    "lines": [
      {
        "timestamp": "2023-10-27T09:59:58.123456+09:00",
        "level": "INFO",
        "message": "Entry 1"
      },
      {
        "timestamp": "2023-10-27T09:59:58.623456+09:00",
        "level": "INFO",
        "message": "Entry 2"
      },
      {
        "timestamp": "2023-10-27T09:59:59.123456+09:00",
        "level": "INFO",
        "message": "Entry 3"
      }
    ]
  },
  "config": {
    "elapsedUnit": "ms"
  }
}
```

### Second Batch (Manual flush)
```json
{
  "type": "request",
  "context": {
    "request_id": "req-12345",
    "batch": 2
  },
  "runtime": {
    "severity": "INFO",
    "startTime": "2023-10-27T09:59:59.123456+09:00",
    "endTime": "2023-10-27T10:00:00.123456+09:00",
    "elapsed": 1000,
    "lines": [
      {
        "timestamp": "2023-10-27T09:59:59.623456+09:00",
        "level": "INFO",
        "message": "Entry 4"
      },
      {
        "timestamp": "2023-10-27T10:00:00.123456+09:00",
        "level": "INFO",
        "message": "Entry 5"
      }
    ]
  },
  "config": {
    "elapsedUnit": "ms"
  }
}
```

## Password Masking

When password masking middleware is enabled, sensitive information is automatically masked:

```json
{
  "timestamp": "2023-10-27T09:59:58.123456+09:00",
  "level": "INFO",
  "message": "User login with password=*** and token=***"
}
```

### Masked Patterns
- `password=value` → `password=***`
- `"password":"value"` → `"password":"***"`
- Default masked keys: password, passwd, pwd, pass, secret, token, key, auth, credential, api_key, access_token, refresh_token
