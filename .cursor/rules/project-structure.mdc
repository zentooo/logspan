---
description:
globs:
alwaysApply: true
---
# Project Structure Guide

This project is a Go logging library that provides both context-based and direct logging capabilities.

## Main Components

### Core Logger Package
The main package is located in the `logger/` directory and contains the following key files:

- [logger.go](mdc:logger/logger.go) - Core logger interface and main API functions
- [base_logger.go](mdc:logger/base_logger.go) - Base logger implementation with common functionality
- [context_logger.go](mdc:logger/context_logger.go) - Context-based logger implementation
- [direct_logger.go](mdc:logger/direct_logger.go) - Direct logging implementation
- [config.go](mdc:logger/config.go) - Configuration and initialization
- [entry.go](mdc:logger/entry.go) - Log entry structure definitions
- [middleware.go](mdc:logger/middleware.go) - Middleware interface and processing framework
- [middleware_manager.go](mdc:logger/middleware_manager.go) - Global middleware management
- [context.go](mdc:logger/context.go) - Context helper functions
- [level.go](mdc:logger/level.go) - Log level definitions and utilities
- [password_masking_middleware.go](mdc:logger/password_masking_middleware.go) - Password masking middleware implementation
- [error_handler.go](mdc:logger/error_handler.go) - Error handling interfaces and implementations
- [pool.go](mdc:logger/pool.go) - Memory pool management for LogEntry objects
- [formatter_utils.go](mdc:logger/formatter_utils.go) - Formatter utility functions

### Formatters
The `formatter/` directory contains different output format implementations:
- [interface.go](mdc:formatter/interface.go) - Formatter interface
- [json_formatter.go](mdc:formatter/json_formatter.go) - Standard JSON formatter with optional indentation
- [context_flatten_formatter.go](mdc:formatter/context_flatten_formatter.go) - Context flatten formatter that moves context fields to top level

### HTTP Middleware
Optional HTTP server middleware implementations are in the `http_middleware/` directory:
- [middleware.go](mdc:http_middleware/middleware.go) - HTTP request logging middleware

### Examples
The `examples/` directory contains usage examples:
- [context_logger/](mdc:examples/context_logger) - Context logger usage examples
- [direct_logger/](mdc:examples/direct_logger) - Direct logger usage examples
- [context_flatten_formatter/](mdc:examples/context_flatten_formatter) - Context flatten formatter examples
- [auto_flush/](mdc:examples/auto_flush) - Auto-flush feature demonstration
- [error_handling/](mdc:examples/error_handling) - Error handling examples
- [advanced_config/](mdc:examples/advanced_config) - Advanced configuration examples
- [middleware/](mdc:examples/middleware) - Custom middleware examples
- [log_type/](mdc:examples/log_type) - Custom log type examples
- [http_middleware_example.go](mdc:examples/http_middleware_example.go) - HTTP middleware usage

### Test Files
Comprehensive test coverage with the following test files:
- [context_logger_test.go](mdc:logger/context_logger_test.go) - Context logger tests
- [direct_logger_test.go](mdc:logger/direct_logger_test.go) - Direct logger tests
- [base_logger_test.go](mdc:logger/base_logger_test.go) - Base logger tests
- [config_test.go](mdc:logger/config_test.go) - Configuration tests
- [context_test.go](mdc:logger/context_test.go) - Context helper tests
- [level_test.go](mdc:logger/level_test.go) - Log level tests
- [middleware_test.go](mdc:logger/middleware_test.go) - Middleware framework tests
- [middleware_manager_test.go](mdc:logger/middleware_manager_test.go) - Middleware manager tests
- [password_masking_middleware_test.go](mdc:logger/password_masking_middleware_test.go) - Password masking tests
- [error_handler_test.go](mdc:logger/error_handler_test.go) - Error handler tests
- [pool_test.go](mdc:logger/pool_test.go) - Memory pool tests
- [formatter_utils_test.go](mdc:logger/formatter_utils_test.go) - Formatter utility tests
- [source_info_test.go](mdc:logger/source_info_test.go) - Source information tests
- [json_formatter_test.go](mdc:formatter/json_formatter_test.go) - JSON formatter tests
- [context_flatten_formatter_test.go](mdc:formatter/context_flatten_formatter_test.go) - Context flatten formatter tests
- [middleware_test.go](mdc:http_middleware/middleware_test.go) - HTTP middleware tests

## Key Features
- **Dual-mode logging**: Context-based aggregation and direct immediate output
- **Memory optimization**: Object pooling and auto-flush capabilities
- **Error handling**: Comprehensive error handling with customizable handlers
- **Transparent context management**: Automatic context propagation through HTTP middleware
- **Simple API interface**: Intuitive and easy-to-use logging methods
- **Extensibility through middleware**: Pluggable middleware system for log processing
- **Password masking**: Built-in sensitive information protection
- **Context flattening**: Flatten context fields to top level for easier access
- **Pretty-printing**: Optional JSON indentation for development
- **HTTP integration**: Automatic request logging and context setup
- **Thread-safe**: Goroutine-safe implementation
- **Configurable**: Flexible configuration options
- **Zero dependencies**: Uses only Go standard library

## Architecture

### Package Structure
```
logspan/
├── logger/                          # Core logging functionality
│   ├── logger.go                   # Main API and global functions
│   ├── base_logger.go              # Base logger with common functionality
│   ├── context_logger.go           # Context-based logger
│   ├── direct_logger.go            # Direct logger
│   ├── config.go                   # Configuration management
│   ├── entry.go                    # Log entry structure
│   ├── middleware.go               # Middleware framework
│   ├── middleware_manager.go       # Global middleware management
│   ├── context.go                  # Context utilities
│   ├── level.go                    # Log level definitions
│   ├── password_masking_middleware.go # Password masking
│   ├── error_handler.go            # Error handling
│   ├── pool.go                     # Memory pool management
│   └── formatter_utils.go          # Formatter utilities
├── formatter/                       # Output formatters
│   ├── interface.go                # Formatter interface
│   ├── json_formatter.go           # JSON output
│   └── context_flatten_formatter.go # Context flatten format
├── http_middleware/                 # HTTP integration
│   └── middleware.go               # HTTP middleware
└── examples/                        # Usage examples
    ├── context_logger/             # Context logger examples
    ├── direct_logger/              # Direct logger examples
    ├── context_flatten_formatter/  # Context flatten formatter examples
    ├── auto_flush/                 # Auto-flush examples
    ├── error_handling/             # Error handling examples
    ├── advanced_config/            # Advanced configuration examples
    ├── middleware/                 # Custom middleware examples
    ├── log_type/                   # Custom log type examples
    └── http_middleware_example.go  # HTTP middleware examples
```

### Design Principles
1. **Simplicity**: Clean and intuitive API design
2. **Flexibility**: Support for various use cases and output formats
3. **Extensibility**: Middleware-based architecture for customization
4. **Performance**: Efficient log processing and minimal overhead with memory pooling
5. **Safety**: Thread-safe operations and secure handling of sensitive data
6. **Reliability**: Comprehensive error handling and recovery mechanisms
7. **Zero Dependencies**: Self-contained with no external dependencies
