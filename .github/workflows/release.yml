name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go tool gotestsum -- -v -race ./...

    - name: Run linter
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1.6
        args: --timeout=5m

    - name: Build
      run: go build -v ./...

    - name: Get latest tag
      id: get_latest_tag
      run: |
        # Get the latest tag, or use v0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Determine next version
      id: next_version
      run: |
        LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
        VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"

        # Remove 'v' prefix if present
        CURRENT_VERSION=${LATEST_TAG#v}

        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}

        # Increment version based on type
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac

        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        echo "Next version: $NEW_VERSION (type: $VERSION_TYPE)"

    - name: Check if version already exists
      id: check_version
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
        if git tag -l | grep -q "^${NEW_VERSION}$"; then
          echo "Version $NEW_VERSION already exists!"
          echo "version_exists=true" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "version_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"

        # Create changelog content
        echo "## $NEW_VERSION ($(date +%Y-%m-%d))" > RELEASE_CHANGELOG.md
        echo "" >> RELEASE_CHANGELOG.md

        # Get commits since last tag
        if [ "$LATEST_TAG" != "v0.0.0" ]; then
          echo "### Changes" >> RELEASE_CHANGELOG.md
          git log --pretty=format:"- %s (%h)" ${LATEST_TAG}..HEAD >> RELEASE_CHANGELOG.md
        else
          echo "### Initial Release" >> RELEASE_CHANGELOG.md
          echo "- Initial release of LogSpan logging library" >> RELEASE_CHANGELOG.md
        fi

        echo "" >> RELEASE_CHANGELOG.md

        # Read the changelog content for release notes
        CHANGELOG_CONTENT=$(cat RELEASE_CHANGELOG.md)
        echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update CHANGELOG.md
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"

        # Create or update CHANGELOG.md
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi

        # Insert new changelog entry after the header
        sed -i '/^# Changelog/r RELEASE_CHANGELOG.md' CHANGELOG.md

    - name: Commit changelog
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add CHANGELOG.md
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: update CHANGELOG.md for $NEW_VERSION"
          git push origin main
        fi

    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        git push origin $NEW_VERSION

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.new_version }}
        release_name: Release ${{ steps.next_version.outputs.new_version }}
        body: |
          ${{ steps.changelog.outputs.changelog_content }}

          ## Installation

          ```bash
          go get github.com/zentooo/logspan@${{ steps.next_version.outputs.new_version }}
          ```

          ## Documentation

          - [English README](https://github.com/zentooo/logspan/blob/main/README_EN.md)
          - [Japanese README](https://github.com/zentooo/logspan/blob/main/README.md)
          - [Go Documentation](https://pkg.go.dev/github.com/zentooo/logspan@${{ steps.next_version.outputs.new_version }})
        draft: false
        prerelease: false

    - name: Clean up
      run: |
        rm -f RELEASE_CHANGELOG.md